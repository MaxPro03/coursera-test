# 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
# В расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия.
# Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.

# import sys
#
# script_name, working_hours, hourly_rate, bonuses = sys.argv
# wage = (int(working_hours) * int(hourly_rate))+int(bonuses)
# print(wage)


# 2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка использовать генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].

# initial_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
# filtered_list = [element for element in initial_list if (initial_list.index(element) != 0 and (element - initial_list[initial_list.index(element) - 1]) > 0)]
#
#
# print(filtered_list)

# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
# Подсказка: использовать функцию range() и генератор.

# new_list = [element for element in range(20, 240) if element % 20 == 0 or element % 21 == 0]
# print(new_list)


# 4. Представлен список чисел. Определить элементы списка, не имеющие повторений. Сформировать итоговый массив чисел, соответствующих требованию.
# Элементы вывести в порядке их следования в исходном списке. Для выполнения задания обязательно использовать генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]

# sample_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
# unique_list = [element for element in sample_list if sample_list.count(element) == 1]
# print(unique_list)

# 5. Реализовать формирование списка, используя функцию range() и возможности генератора. В список должны войти четные числа от 100 до 1000 (включая границы).
# Необходимо получить результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce().

# from functools import reduce
#
# odd_numbers = [element for element in range(100, 1001) if element % 2 == 0]
# result = [reduce(lambda element, r: element*r, odd_numbers)]
# print(result)

# 6. Реализовать два небольших скрипта:
# а) итератор, генерирующий целые числа, начиная с указанного,
# б) итератор, повторяющий элементы некоторого списка, определенного заранее.
# Подсказка: использовать функцию count() и cycle() модуля itertools. Обратите внимание, что создаваемый цикл не должен быть бесконечным.
# Необходимо предусмотреть условие его завершения.
# Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл. Во втором также необходимо предусмотреть условие,
# при котором повторение элементов списка будет прекращено.

# from itertools import count
# from itertools import cycle

# start_num = int(input('input starting num as integer: '))
#
# for element in count(start_num):
#     if start_num + 10 == element:
#         break
#     else:
#         print(element)

# sample_list = ["1", "2", "3", "4", "5"]
# print(type(sample_list))
# count_num = 0
#
# iter = cycle(sample_list)
# while count_num < 3:
#     elem = next(iter)
#     if sample_list[-1] == elem:
#         print(elem)
#         count_num += 1
#     else:
#         print(elem)

# 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. При вызове функции должен создаваться объект-генератор.
# Функция должна вызываться следующим образом: for el in fact(n). Функция отвечает за получение факториала числа,
# а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.
# Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.

# def num_factorial(num):
#     test = 1
#     result = 1
#     while test != num:
#         print("result", result)
#         print("test", test)
#         yield result * test
#         result = result * (test +1)
#         print(result)
#         test += 1
# 
# 
# user_input = int(input('vvedite: '))
# count = 0
# s_test = True
# while s_test == True:
#     for elm in num_factorial(user_input):
#         if count == (user_input + 5):
#             break
#         else:
#             count += 1
#         s_test = False

